@comment{{This file has been generated by bib2bib 1.96}}

@comment{{Command line: bib2bib -ob 1996.bib -c year=1996 csdl-trs.bib}}

@article{csdl-93-22,
  author = {Philip M. Johnson},
  journal = {Software Quality Journal},
  title = {Design for Instrumentation: High Quality Measurement of Formal Technical Review},
  year = 1996,
  volume = 5,
  number = 3,
  pages = {33-51},
  keywords = {CSRS, Publications-Journals},
  month = {March},
  url = {http://csdl.ics.hawaii.edu/techreports/1994/94-21/94-21.pdf},
  abstract = {All current software quality assurance methods incorporate some form of
  formal technical review (FTR), because structured analysis of software
  artifacts by a team of skilled technical personnel has demonstrated
  ability to improve quality.  However, FTR methods come in a wide
  variety of forms with varying effectiveness, incur significant
  overhead on technical staff, and have little computer support.
  Measurements of these FTR methods are coarse-grained, frequently low
  quality, and expensive to obtain.

  This paper describes CSRS, a highly instrumented, computer-supported
  system for formal technical review, and shows how it is designed to
  collect high quality, fine-grained measures of FTR process and products
  automatically.  The paper also discusses some results from over one year
  of experimentation with CSRS; describes how CSRS improves current
  process improvement approaches to FTR; and overviews several novel
  research projects on FTR that are made possible by this system. }
}

@inproceedings{csdl-94-08,
  author = {Philip M. Johnson},
  title = {From Principle-centered to Organization-centered Design: A Case Study of Evolution in a Computer-Supported Formal Technical Review Environment},
  booktitle = {Interdisciplinary Approaches to System Analysis and Design},
  keywords = {CSRS},
  year = 1996,
  month = {July},
  abstract = {  Design of new computer-based environments to replace or augment
  traditional, manual work procedures is typically problematic due to
  its experimental and embedded nature: the requirements for the
  computer-based version of the task may not be well defined, and the
  outcome of introducing computer-based support may well change the
  nature of the task altogether.

  This paper illustrates these issues through a discussion of the
  evolution in the design of CSRS, an instrumented, computer-supported
  cooperative work environment for formal technical review.  CSRS was
  originally designed in response to well-recognized shortcomings in
  traditional, non-computer-based formal technical review methods.  The
  initial design was thus founded upon a principle-centered basis,
  where the system was oriented toward solving known problems in the
  domain of formal technical review.  Over time, the design has evolved
  toward a more organization-centered basis, in which the system is
  oriented toward support for adoption and use within organizations, even
  if that support conflicts with the ``principles'' of formal technical
  review.  We conjecture that such an evolution may be inevitable in
  experimental and embedded design domains. },
  url = {http://csdl.ics.hawaii.edu/techreports/1994/94-08/scharding.ps}
}

@phdthesis{csdl-95-08,
  author = {Danu Tjahjono},
  title = {Exploring the effectiveness of formal technical review
		  factors with {CSRS}, a collaborative software review system},
  school = {Department of Information and Computer Sciences,
		  University of Hawaii},
  year = {1996},
  keywords = {CSRS, Thesis-PhD},
  type = {{Ph.D.} Thesis},
  number = {{CSDL}-95-08},
  month = {August},
  url = {ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-95-08.pdf},
  abstract = {
Formal Technical Review (FTR) plays an important role in modern software
development. It can improve the quality of software products and the
quality and productivity of their development processes.  However, the
effectiveness of current FTR practice is hampered by uncertainty and
ambiguity.  This research investigated two issues. First, what differences
exist among current FTR methods? Second, what are potential review factors
that impact upon the effectiveness of these methods?

The approach taken by this research was to first develop a FTR framework,
based on a review of literature in the field.  The framework allows one to
determine the similarities and differences between the review process of
FTR methods, as well as to identify potential review factors.
Specifically, it describes a review method in terms of seven components of
a review process: phase, objective, degree of collaboration, synchronicity,
role, technique, entry/exit criteria.  By looking at the values of
individual components, one can compare and contrast different FTR
methods. Furthermore, by investigating these values empirically, one can
methodically improve the practice of FTR.

Second, a computer based review system, called CSRS, was developed to
implement the framework. The system provides a set of declarative modeling
languages, which allow one to create a wide variety of FTR methods, or to
design experiments to compare the performance of two or more review
methods, or to evaluate a set of review factors within a method.

Finally, this research involved an empirical study using CSRS to
investigate the effectiveness of a group process versus an individual
process in finding program faults.  Two review methods/systems were
implemented using CSRS: EGSM (used by real groups) and EIAM (used by
nominal groups).  The experiment involved 24 groups of students (3 students
per group), each reviewing two sets of source code, once using EGSM and
once using EIAM.  The experiment found that there were no significant
differences in detection effectiveness between the two methods, that
synergy was observed in EGSM but did not contribute significantly to the
total faults found, and that EGSM incurred higher cost than EIAM, but was
significantly more effective in filtering out false positives. }
}

@techreport{csdl-95-21,
  author = {Jennifer M. Geis},
  title = {An Evaluation of {F}lashmail: a computer-mediated communication tool},
  institution = {Department of Information and Computer Sciences,
		  University of Hawaii, Honolulu, Hawaii 96822},
  keywords = {Flashmail},
  number = {{CSDL}-95-21},
  url = {ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-95-21.pdf},
  year = {1996},
  abstract = {
  This paper presents the results from an analysis of a new
  computer-mediated communication tool called Flashmail.  I investigated
  how people used Flashmail as well as Flashmail's relationship to
  conventional electronic mail.  Participants in the experiment loaded
  extensions that gathered data regarding the characteristics of all
  messages sent through E-mail and Flashmail.  This data was used
  to analyze the conditions under which each system was used.  I found that
  Flashmail seems to be preferred whenever the message is short, needs to
  be communicated in a short period of time, and when both the recipient
  and the sender are logged into the system and active at the time of
  sending.  In contrast, I found that E-mail was preferred for messages
  that were large (over 400 characters) and non-urgent, or when the
  receiver was either not logged into Flashmail or had been idle for longer
  than 7 minutes.  These results indicate that Flashmail is generally used
  as a rapid, synchronous messaging method.},
  month = {May}
}

@article{csdl-95-23,
  author = {Philip M. Johnson},
  title = {Egret: A Framework for Advanced {CSCW} Applications},
  journal = {{ACM} Software Engineering Notes},
  year = {1996},
  volume = {21},
  number = {2},
  url = {ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-95-23.pdf},
  month = {May},
  keywords = {EGRET, Publications-Periodicals},
  abstract = {
Egret is a publically available, advanced framework for construction of
computer-supported cooperative work applications.  Egret provides an
approach to multi-user, interactive application development that differs
markedly from other frameworks or infrastructures, such as Groupkit, WWW,
or Lotus Notes.  This short paper introduces Egret, its architecture,
design philosophy, selected applications, and interest groups within the
software engineering community. It concludes with information on how Egret's sources,
binaries, and documentation may be obtained free of charge using the
Internet.}
}

@techreport{csdl-96-01,
  author = {Danu Tjahjono},
  institution = {Department of Information and Computer Sciences,
		  University of Hawaii, Honolulu, Hawaii 96822},
  keywords = {CSRS},
  url = {ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-96-01.pdf},
  number = {{CSDL}-96-01},
  title = {{CSRS} Design Reference 3.5.0},
  summary = {This document contains a reference manual for Version 3.5.0
		  of the CSRS
		  collaborative software review environment},
  month = {February},
  year = 1996
}

@techreport{csdl-96-04,
  author = {David Brauer and Philip M. Johnson and Carleton A. Moore},
  title = {Requiem for the Project HI-TIME Collaborative Process},
  institution = {Department of Information and Computer Sciences,
		  University of Hawaii, Honolulu, Hawaii 96822},
  number = {{CSDL}-96-04},
  url = {ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-96-04.pdf},
  year = {1996},
  keywords = {HI-TIME},
  month = {March},
  abstract = {
In early 1995, the State of Hawaii began work on an ambitious revision to
its telecommunications policy planning process.  A multidisciplinary team
was commissioned to develop a proposal for an iterative, interactive,
computer-mediated collaborative planning process whereby the State's
telecommunications infrastructure plan could be developed and periodically
upgraded to reflect technology and policy shifts in local communities. The
proposal included a sophisticated, CSCW software system called HI-TIME
which would both enact the planning process as well as provide access and
visibility into the planning process for the general public.  In early
1996, the ambitious collaborative planning process, including the
implemented, deployed HI-TIME system, was abandoned in favor of a more
traditional approach. This paper explores the rise and fall of Project
HI-TIME and the lessons it holds for developers of CSCW systems.}
}

@techreport{csdl-96-05,
  author = {Philip M. Johnson},
  title = {State as an Organizing Principle for {CSCW} Architectures},
  institution = {Department of Information and Computer Sciences,
		  University of Hawaii, Honolulu, Hawaii 96822},
  url = {ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-96-05.pdf},
  year = {1996},
  number = {{CSDL}-96-05},
  keywords = {EGRET},
  month = {March},
  abstract = {  A useful way to gain insight into collaborative architectures is by
analyzing how they collect, represent, store, analyze, and distribute state
information.  This paper presents state as an organizing principle for
collaborative architectures. It uses a framework with eight dimensions to
analyze four systems: WWW, GroupKit, Lotus Notes, and Egret. The analysis
illuminates similarities and differences between these architectures, and
yields two conjectures: that no single collaborative architecture can fully
support both collaboration-in-the-small and collaboration-in-the-large, and
that flexible and efficient support for state management requires
architectural support for agents as first-class users.}
}

@techreport{csdl-96-13,
  author = {Philip M. Johnson},
  keywords = {FTR},
  title = {{BRIE}: A {B}enchmark {I}nspection {E}xperiment},
  institution = {Department of Information and Computer Sciences,
		  University of Hawaii, Honolulu, Hawaii 96822},
  year = {1996},
  url = {http://csdl.ics.hawaii.edu/techreports/1996/96-13/96-13.html},
  number = {{CSDL}-96-13},
  month = {September},
  abstract = {The BenchmaRk Inspection Experiment (BRIE) is an attempt to
design and package a simple experimental design that satisfies
the goals of a benchmark experiment.
The BRIE acronym has a second expansion: Basic RevIew Education.  BRIE is
designed to have a second, complementary goal: a high quality training
package for a simple formal technical review method.  Thus, BRIE is a
curriculum module intended to be useful
in either an industry or academic
setting to introduce students to both software review and
empirical software engineering research practice.}
}

@techreport{csdl-96-16,
  number = {{CSDL}-96-16},
  author = {Philip M. Johnson},
  title = {Measurement Dysfunction in Formal Technical Review},
  institution = {Department of Information and Computer Sciences,
		  University of Hawaii, Honolulu, Hawaii 96822},
  url = {http://csdl.ics.hawaii.edu/techreports/1996/96-16/96-16.html},
  month = {November},
  year = {1996},
  keywords = {FTR},
  abstract = {This paper explores some of the issues that arise in effective
use of measures to monitor and improve formal technical review
practice in industrial settings. It focuses on measurement
dysfunction: a situation in which the act of measurement
affects the organization in a counter-productive fashion,
which leads to results directly counter to those intended
by the organization for the measurement.}
}

@comment{{csdl2-08-06,
  author = 	 Robert S. Brewer,
  title = 	 Literature review on carbon footprint collection and analysis ,
  institution =  "Department of Information and Computer Sciences,
		  University of Hawaii, Honolulu, Hawaii 96822",
  NUMBER = CSDL-08-06,
  KEYWORDS = Sustainability,
  MONTH = December,
  YEAR = 2008,
  URL = http://csdl.ics.hawaii.edu/techreports/2008/08-06/08-06.pdf,
  abstract = Obsolete. Please see by Technical Report 09-05.

}}

