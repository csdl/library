@comment{{This file has been generated by bib2bib 1.96}}

@comment{{Command line: bib2bib -ob 1998.bib -c year=1998 csdl-trs.bib}}

@article{csdl-95-24,
  author = {Philip M. Johnson},
  title = {Reengineering Inspection: The Future of Formal
		  Technical Review},
  journal = {Communications of the {ACM}},
  year = {1998},
  volume = 41,
  number = 2,
  month = {February},
  pages = {49-52},
  url = {ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-95-24.pdf},
  keywords = {CSRS, Publications-Journals},
  abstract = {  Formal technical review is acknowledged as a preeminant software
  quality improvement method. The ``inspection'' review method, first
  introduced by Michael Fagan twenty years ago, has led to dramatic
  improvements in software quality. It has also led to a myopia within
  the review community, which tends to view inspection-based methods as
  not just effective, but as the optimal approach to formal
  technical review.  This article challenges this view by presenting a
  taxonomy of software review that shows inspection to be just one among
  many valid approaches. The article then builds upon this framework to propose
  seven guidelines for the radical redesign and improvement of formal
  technical review during the next twenty years.}
}

@article{csdl-96-14,
  author = {Philip M. Johnson and Danu Tjahjono},
  title = {Does Every Inspection Really Need A Meeting?},
  keywords = {FTR, CSRS, Publications-Journals},
  journal = {Journal of Empirical Software Engineering},
  year = {1998},
  volume = {4},
  number = {1},
  pages = {9-35},
  month = {January},
  abstract = {
  Software review is a fundamental component of the software quality
  assurance process, yet significant controversies surround the most
  efficient and effective review method. A central question surrounds the
  use of meetings; traditional review practice views them as essential,
  while more recent findings question their utility.  To provide insight
  into this question, we conducted a controlled experiment to
  assess several measures of cost and effectiveness for a meeting and
  non-meeting-based review method.  The experiment used CSRS, a computer
  mediated collaborative software review environment, and 24 three person
  groups.  We found that the meeting-based review method studied was
  significantly more costly than the non-meeting-based method, but that
  meeting-based review did not find significantly more defects than the
  non-meeting-based method. However, the meeting-based review method was
  significantly better at reducing the level of false positives, and
  subjects subjectively preferred meeting-based review over
  non-meeting-based review.  This paper presents the motivation for this
  experiment, its design and implementation, our empirical findings,
  pointers to Internet repositories for replication or additional analysis
  of this experiment, conclusions, and future directions. },
  url = {ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-96-14.ps.Z}
}

@mastersthesis{csdl-98-01,
  type = {{M.S.} Thesis},
  number = {{CSDL}-98-01},
  keywords = {JavaWizard, Thesis-MS},
  author = {Jennifer M. Geis},
  title = {JavaWizard: Investigating Defect Detection and Analysis},
  school = {University of Hawaii},
  year = {1998},
  month = {May},
  url = {ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-98-01.pdf},
  abstract = {This thesis presents a study designed to investigate the occurrence of
  certain kinds of errors in Java programs using JavaWizard
  (JWiz), a static analysis mechanism for Java source code.  JWiz is an
  extensible tool that supports detection of certain commonly occurring
  semantic errors in Java programs.  For this thesis, I used JWiz within a
  research framework designed to reveal (1) knowledge about the kinds of
  errors made by Java programmers, (2) differences among Java programmers
  in the kinds of errors made, and (3) potential avenues for improvement in
  the design and/or implementation of the Java language or environment.

  I performed a four week case study, collecting data from 14 students over
  three programming projects which produced approximately 12,800 lines of
  code.  The JWiz results were categorized into three types: functional
  errors (must be fixed for the program to work properly, maintenance
  errors (program will work, but considered to be bad style), and false
  positives (intended by the developer).  Out of 235 JWiz warnings, there
  were 69 functional errors, 100 maintenance errors, and 66 false
  positives.  The fix times for the functional errors added up to five and
  a half hours, or 7.3 percent of the total amount of time spent debugging
  in test.

  I found that all programmers inject a few of the same mistakes into their
  code, but these are only minor, non-defect causing errors.  I found that
  the types of defects injected vary drastically with no correlation to
  program size or developer experience.  I also found that for those
  developers who make some of the mistakes that JWiz is designed for, JWiz
  can be a great help, saving significant amounts of time ordinarily spent
  tracking down defects in test.}
}

@inproceedings{csdl-98-04,
  author = {Anne M. Disney and Philip M. Johnson},
  title = {Investigating Data Quality Problems in the {PSP}},
  booktitle = {Sixth International Symposium on the Foundations of
		  Software Engineering (SIGSOFT'98)},
  keywords = {PSP, Publications-Conferences},
  year = {1998},
  address = {Orlando, FL.},
  month = {November},
  url = {http://csdl.ics.hawaii.edu/techreports/1998/98-04/98-04.pdf},
  abstract = {  The Personal Software Process (PSP) is used by software engineers to
  gather and analyze data about their work.  Published studies typically
  use data collected using the PSP to draw quantitative conclusions about
  its impact upon programmer behavior and product quality.  However,
  our experience using PSP in both industrial and academic settings
  revealed problems both in collection of data and its later analysis.
  We hypothesized that these two kinds of data quality problems could make a
  significant impact upon the value of PSP measures.  To test this
  hypothesis, we built a tool to automate the PSP and then examined 89
  projects completed by ten subjects using the PSP manually in an
  educational setting.  We discovered 1539 primary errors and categorized
  them by type, subtype, severity, and age.  To examine the collection
  problem we looked at the 90 errors that represented impossible
  combinations of data and at other less concrete anomalies in Time
  Recording Logs and Defect Recording Logs.  To examine the analysis
  problem we developed a rule set, corrected the errors as far as possible,
  and compared the original and corrected data.  This resulted in
  significant differences for measures such as yield and the
  cost-performance ratio, confirming our hypothesis.  Our results raise
  questions about the accuracy of manually collected and analyzed PSP data,
  indicate that integrated tool support may be required for high quality
  PSP data analysis, and suggest that external measures
  should be used when attempting to evaluate the impact of the PSP upon
  programmer behavior and product quality.}
}

@techreport{csdl-98-05,
  author = {Anne M. Disney and Jarrett Lee and  Tuan Huynh and Jennifer Saito},
  title = {Investigating the Design and Evaluation of Research Web Sites},
  institution = {Department of Information and Computer Sciences,
		  University of Hawaii, Honolulu, Hawaii 96822},
  keywords = {WWW},
  year = {1998},
  month = {May},
  number = {{CSDL}-98-05},
  url = {http://csdl.ics.hawaii.edu/techreports/1998/98-05/98-05.html},
  abstract = {The Aziza design group (formally 691 Web Development
Team) was commissioned by CSDL to implement a new web site. The group was
assigned not only to update the entire site, but also to research and
investigate the process and life cycle of World Wide Web site development.

This research document records the process and products that occurred
while updating of the CSDL web site.
It discusses issues such as the balance between providing
information and providing an image of the group,
and ways to share research information over the World Wide Web.
To back the data researched, evaluations by the various users of the site
occurred and are discussed here. This
document records our web site design processes,
what insights we had about those processes, our findings, and finally, our
conclusions.}
}

@techreport{csdl-98-06,
  author = {Anne M. Disney and Jarrett Lee and  Tuan Huynh and Jennifer Saito},
  title = {CSDL Web Site Requirements Specification Document},
  keywords = {WWW},
  institution = {Department of Information and Computer Sciences,
		  University of Hawaii, Honolulu, Hawaii 96822},
  year = {1998},
  month = {April},
  number = {{CSDL}-98-06},
  url = {http://csdl.ics.hawaii.edu/techreports/1998/98-06/98-06.html},
  abstract = {The purpose of this document is to
summarize the results of our background research for the
CSDL web site, and describe the resulting requirements for
		  evaluation and review.}
}

@techreport{csdl-98-07,
  author = {Robert S. Brewer},
  institution = {Department of Information and Computer Sciences,
		  University of Hawaii, Honolulu, Hawaii 96822},
  number = {{CSDL}-98-07},
  title = {Improving Mailing List Archives through Condensation},
  keywords = {MCS, Thesis-Proposals},
  type = {{M.S.} Thesis Proposal},
  month = {September},
  year = 1998,
  url = {http://csdl.ics.hawaii.edu/techreports/1998/98-07/proposal.pdf},
  abstract = {
		  Electronic mailing lists are popular Internet information
		  sources. Many mailing lists maintain an archive of all
		  messages sent to the list which is often searchable using
		  keywords. While useful, these archives suffer from the fact
		  that they include all messages sent to the list. Because they
		  include all messages, the ability of users to rapidly find
		  the information they want in the archive is hampered. To
		  solve the problems inherent in current mailing list archives,
		  I propose a process called condensation whereby one can strip
		  out all the extraneous, conversational aspects of the data
		  stream leaving only the pearls of interconnected wisdom.

		  To explore this idea of mailing list condensation and to test
		  whether or not a condensed archive of a mailing list is
		  actually better than traditional archives, I propose the
		  construction and evaluation of a new software system.  I name
		  this system the Mailing list Condensation System or MCS. MCS
		  will have two main parts: one which is dedicated to taking
		  the raw material from the mailing list and condensing it, and
		  another which stores the condensed messages and allows users
		  to retrieve them.

		  The condensation process is performed by a human editor
		  (assisted by a tool), not an AI system. While this adds a
		  certain amount of overhead to the maintenance of the
		  MCS-generated archive when compared to a traditional archive,
		  it makes the system implementation feasible.

		  I believe that an MCS-generated mailing list archive
		  maintained by an external researcher will be adopted as a
		  information resource by the subscribers of that mailing list.
		  Furthermore, I believe that subscribers will prefer the
		  MCS-generated archive over existing traditional archives of
		  the mailing list. This thesis will be tested by a series of
		  quantitative and qualitative measures.  }
}

@mastersthesis{csdl-98-08,
  type = {{M.S.} Thesis},
  number = {{CSDL}-98-08},
  keywords = {PSP, Thesis-MS},
  author = {Anne M. Disney},
  title = {Data Quality Problems in the Personal Software Process},
  school = {University of Hawaii},
  year = {1998},
  month = {August},
  url = {http://csdl.ics.hawaii.edu/techreports/1998/98-08/98-08.pdf},
  abstract = {  The Personal Software Process (PSP) is used by software engineers to
  gather and analyze data about their work and to produce empirically
  based evidence for the improvement of planning and quality in future
  projects.  Published studies have suggested that adopting the PSP results
  in improved size and time estimation and in reduced numbers of defects
  found in the compile and test phases of development.  However, personal
  experience using PSP in both industrial and academic settings caused me
  to wonder about the quality of two areas of PSP practice: collection and
  analysis.  To investigate this I built a tool to automate the PSP and
  then examined 89 projects completed by nine subjects using the PSP in an
  educational setting.  I discovered 1539 primary errors and analyzed them
  by type, subtype, severity, and age.  To examine the collection problem
  I looked at the 90 errors that represented impossible combinations of
  data and at other less concrete anomalies in Time Recording Logs and
  Defect Recording Logs.  To examine the analysis problem I developed a
  rule set, corrected the errors as far as possible, and compared the
  original and corrected data.  This resulted in substantial
  differences for numbers such as yield and the cost-performance ratio.
  The results raise questions about the accuracy of published data on the
  PSP and directions for future research.}
}

@article{csdl-98-11,
  keywords = {PSP, Publications-Journals},
  author = {Philip M. Johnson and Anne M. Disney},
  title = {The Personal Software Process: A Cautionary Case Study},
  journal = {{IEEE} Software},
  year = {1998},
  volume = {15},
  number = {6},
  month = {November},
  abstract = {
In 1995, Watts Humphrey introduced the Personal Software Process in
his book, A Discipline for Software Engineering.
Programmers who use the PSP gather measurements related to
their own work products and the process by which they were developed,
then use these measures to drive changes to their development
behavior.
After almost three years of
teaching and using the PSP, we have experienced the educational
benefits of the PSP. As researchers, however, we have also uncovered
evidence of certain limitations, which we believe can help improve
appropriate adoption and evaluation of the method by industrial
and academic practitioners. This paper presents an overview of
a case study we performed that presents evidence
of potential data quality problems, along with
recommendations for those interested in adopting
PSP within industry or academia.}
}

@techreport{csdl-98-15,
  keywords = {JavaWizard},
  author = {Jennifer M. Geis},
  institution = {Department of Information and Computer Sciences,
		  University of Hawaii, Honolulu, Hawaii 96822},
  title = {JavaWizard User Guide},
  year = {1998},
  url = {http://csdl.ics.hawaii.edu/techreports/1998/98-15/98-15.html},
  number = {{{CSDL}-98-15}},
  month = {December},
  abstract = {
  This document describes the use of JavaWizard, an automated code
		  checker for the Java programming language. The user guide
		  includes directions for installation, command line
		  invocation, and graphical user interface invocation.
         }
}

@comment{{csdl2-08-06,
  author = 	 Robert S. Brewer,
  title = 	 Literature review on carbon footprint collection and analysis ,
  institution =  "Department of Information and Computer Sciences,
		  University of Hawaii, Honolulu, Hawaii 96822",
  NUMBER = CSDL-08-06,
  KEYWORDS = Sustainability,
  MONTH = December,
  YEAR = 2008,
  URL = http://csdl.ics.hawaii.edu/techreports/2008/08-06/08-06.pdf,
  abstract = Obsolete. Please see by Technical Report 09-05.

}}

